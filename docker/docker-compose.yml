version: '3'
services:
  nginx:
    environment:
      TZ: ${APP_TIMEZONE}
    image: nginx:${NGINX_VERSION}
    tty: true
    restart: unless-stopped
    ports:
      - ${APP_PORT}:80
      - ${APP_SSL_PORT}:443
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ${APP_PATH}:/var/www
    networks:
      - app-network
  app:
    depends_on:
      - mysql
    environment:
      TZ: ${APP_TIMEZONE}
    build:
      context: ./php-fpm
      dockerfile: Dockerfile
      args:
        PHP_VERSION: ${PHP_VERSION}
        PHP_WITH_GD: ${PHP_WITH_GD}
        NODE_VERSION: ${NODE_VERSION}
        APP_PATH: ${APP_PATH}
    tty: true
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ${APP_PATH}:/var/www
      - ./php-fpm/conf.d/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
      args:
        MYSQL_VERSION: ${MYSQL_VERSION}
    environment:
      TZ: ${APP_TIMEZONE}
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_ALLOW_EMPTY_PASSWORD: "${MYSQL_ALLOW_EMPTY_PASSWORD}"
    tty: true
    restart: unless-stopped
    ports:
      - ${APP_DATABASE_PORT}:3306
    volumes:
      - ./mysql/conf.d/my.cnf:/etc/mysql/conf.d/my.cnf
      - app-db:/var/lib/mysql
    command: mysqld --default-authentication-plugin=mysql_native_password --skip-mysqlx
    networks:
      - app-network
  nuxt:
    build:
      context: ./nuxt
      dockerfile: Dockerfile
      args:
        NUXT_RUN_COMMAND: ${NUXT_RUN_COMMAND}
        APP_PATH: ${APP_PATH}
    environment:
      TZ: ${APP_TIMEZONE}
    tty: true
    restart: unless-stopped
    volumes:
      - ${APP_PATH}frontend/web:/var/www
    networks:
      - app-network
  redis:
    environment:
      TZ: ${APP_TIMEZONE}
    image: redis:${REDIS_VERSION}
    tty: true
    restart: unless-stopped
    volumes:
      - ./redis/conf.d/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
  mailhog:
    environment:
      TZ: ${APP_TIMEZONE}
    image: mailhog/mailhog:latest
    tty: true
    restart: unless-stopped
    networks:
      - app-network
volumes:
  app-db:
    driver: local
networks:
  app-network:
    driver: bridge
